@startuml

package CardSystem
{
    enum Suit
    {
        Hearts,
        Diamonds,
        Clubs,
        Spades
    }
    
    abstract class Card<<S, Violet>>
    {
        - [SerializeField] suit : Suit
        - [SerializeField] image : Sprite
        + GetSuit() : Suit
        + GetImage() : Sprite
    }
    
    class WeaponCard<<S, Violet>> implements Card
    {
        + damageAmount : float
        + GetDamageAmount() : float
    }
    
    class HealCard<<S, Violet>> implements Card
    {
        - healAmount : float
        + GetHealAmount() : float
    }
    
    class MissedCard<<S, Violet>> implements Card {}
    
    class Deck<<S, Violet>>
    {
        - [SerializeField] cards : List<Card>
        + GetCards() : List<Card> // Is a copy!
    }
    
    class DeckHolder<<M, yellow>>
    {
        - [SerializeField] deck : Deck
        - [SerializeField] maxHandSize : int
        
        - cards : List<Card>
        - discard : List<Card>
        - hand : List<Card>
        
        + OnCardDiscarded : Action
        + OnCardDraw : Action
        + OnCardPicked : Action<Card>
        
        + Draw(int n) : void
        + DrawUntilMaxHandSize() : void
        + Discard(Card card) : void
        + PickCard(Card card) : void
        + Shuffle() : void
        + ResetDeck() : void
        + GetRandomCardFromHand() : void
        + GetHandCards() : List<Cards>
        + GetDiscardCards() : List<Cards>
    }
    
    class HandsUI<<M, yellow>>
    {
        - [SerializeField] cardsUI : List<CardUI>
        - [SerializeField] deckHolder : DeckHolder
    }
    
    class CardUI<<M, yellow>>
    {
        - card : Card
        + SetContent(Card card) : void
    }
    
    
    HandsUI --> DeckHolder
    HandsUI -o CardUI
    
    Deck --o Card
    Deck -> DeckHolder
    Card -> Suit
}

package Sequencing
{
    class SequenceHandler<<M, yellow>>
    {
        - [SerializeField] camera : Camera
        - [SerializeField] points : List<Point>
        - currentPoint : Point
        
        + ArrivedOnPointSequence : Action<Point>
        + GoToNextPointSequence() : void
        - GoToPointSequenceCoroutine(SequencePoint sequencePoint) : IEnumerator
    }

    abstract class Point<<M, yellow>>
    {
        - [SerializeField] cameraPoint : Transform
    }
    
    class EnemyPoint<<M, yellow>> implements Point
    {
        - [SerializeField] enemy : Character
    }
    
    class EmptyPoint<<M, yellow>> implements Point
    {
        + waitTime : float
    }
    
    SequenceHandler -o Point
}

package Core
{
    abstract class State<<M, yellow>>
    {
        + OnEnter(StateMachine stateMachine) : void
        + Update(StateMachine stateMachine) : void
        + OnExit(StateMachine stateMachine) : void
    }
    
    class StateMachine<<M, yellow>>
    {
        - currentState : State
        + ChangeState(State state) : void
    }
    
    StateMachine --> State
}

class Health<<M, yellow>>
{
    - [SerializeField] currentLife : int
    - [SerializeField] maxLife : int
    
    + Heal(int life) : void
    + Deal(int life) : void
    + GetCurrentLife() : int
}

class Character<<M, yellow>>
{
    + health : Health
    + deckHolder : deckHolder
}


@enduml